name: Docker Hub Push & EC2에 운영용 컨테이너 띄우기

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: 빌드 작업
    runs-on: ubuntu-latest

    env:
      # 프로젝트
      PROJECT_NAME: ai-rena-backend
      ENV_CONTENT: ${{ secrets.PROD_ENV_CONTENT }}
      # Docker
      DOCKER_ID: ${{ secrets.DOCKER_ID }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: .env 등록
        run: echo "${{ env.ENV_CONTENT }}" > .env

      - name: Docker Hub에 로그인
        uses: docker/login-action@v2
        with:
          username: ${{env.DOCKER_ID}}
          password: ${{env.DOCKER_PASSWORD}}

      - name: Docker 이미지 빌드
        run: |
          docker build -t ${{ env.DOCKER_ID }}/${{ env.PROJECT_NAME }}:latest .

      - name: Docker 이미지 푸시
        run: |
          docker push ${{env.DOCKER_ID}}/${{env.PROJECT_NAME}}:latest

  deploy:
    name: 운영 서버 배포 작업
    needs: build
    runs-on: ubuntu-latest

    env:
      # 프로젝트
      PROJECT_NAME: ai-rena-backend
      # AWS
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_KEY: ${{ secrets.EC2_KEY }}
      # Dokcer
      DOCKER_ID: ${{ secrets.DOCKER_ID }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: Application Build and Run
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER}}
          key: ${{env.EC2_KEY}}
          debug: true
          script: |
            docker stop ${{env.PROJECT_NAME}}
            docker rm -f ${{env.PROJECT_NAME }}
            docker rmi ${{env.DOCKER_ID}}/${{env.PROJECT_NAME}}
            docker pull ${{env.DOCKER_ID}}/${{env.PROJECT_NAME}}
            docker run -p 3000:3000 --name ${{env.PROJECT_NAME}} -d ${{env.DOCKER_ID}}/${{env.PROJECT_NAME}}
            docker image prune -af
